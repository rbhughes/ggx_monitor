#!/usr/bin/env ruby
require "optparse"
require "yaml"
require_relative "../lib/ggx_monitor/olds"

begin

  banner = "\n\nThis utility collects files age/modified and other metadata "\
  "from\na specified number of months ago from these specified types:\n\n"\
    "          -t aoi   => check all areas of interest (default)\n"\
    "          -t layer => check all layers in all AOIs\n"\
    "          -t user  => scan User Files folder contents\n"\
    "          -t log   => scan for all activity/import logs\n\n"
    "from in GeoGraphix projects\nlisted in the options.yml. Results are "\
    "optionally written to CSV file.\n\nUsage: ggx_newlogs [options]\n\n"

  options = {
    months_ago: 6,
    csv_out: false,
    type: nil
  }


  OptionParser.new do |opts|
    opts.banner = banner

    opts.on("-o", "--opts_path [PATH]", "Specify path to options file") do |x|
      options[:opts_path] = x
    end

    opts.on("-m", "--months_ago", "Number of days ago to query") do |x|
      options[:days_ago] = x
    end

    opts.on("-t", "--type [TYPE]", [:aoi, :layer, :log, :user],
            "TYPES: aoi, layer, log, user") do |x|
      options[:type] = x

      #allows the short "-t" to validate too...
      if options[:type].nil?
        puts "!!! Invalid or blank type supplied. Defaulting to: aoi"
        options[:type] = :aoi
      end
    end

    opts.on("-c", "--csv_out", "Output to CSV files (one per type)") do |x|
      options[:csv_out] = x
    end

    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end

  end.parse!

  # merge optparser input with options from file (valid options.yml required)
  yml_path = options[:opts_path] ? options[:opts_path] : "./options.yml"
  if File.exists?(yml_path)
    Olds.set_opts = YAML.load_file(yml_path)[:olds].merge(options)
  else
    raise ArgumentError.new("invalid options file path: #{opts_path}") 
  end

  Olds.process_projects

rescue => e
  raise e if $DEBUG
  STDERR.puts e.message
  STDERR.puts e.backtrace.join("\n")
  exit 1
end

