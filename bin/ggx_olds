#!/usr/bin/env ruby
require "optparse"
require "yaml"
require_relative "../lib/ggx_monitor/olds"

begin

  banner = "\n\nThis utility collects files age/modified and other metadata "\
  "from these\ndata/metadata components:\n\n"\
    "          -t aoi   => check all areas of interest (default)\n"\
    "          -t layer => check all layers in all AOIs\n"\
    "          -t user  => scan User Files folder contents\n"\
    "          -t log   => scan for all activity/import logs\n\n"\
    "...from GeoGraphix project homes listed in the options.yml file. Results "\
    "are\noptionally written to CSV file. Use the skip_days flag to ignore a "\
    "number of\ndays from the present and return only older data. For example:"\
    " '-s 90' will\nonly return data older than about three months.\n\nUsage: "\
    "ggx_newlogs [options]\n\n"

  options = {
    skip_days: 100,
    csv_out: nil,
    type: nil
  }


  OptionParser.new do |opts|
    opts.banner = banner

    opts.on("-o", "--opts_path [PATH]", "Specify path to options file") do |x|
      options[:opts_path] = x
    end

    opts.on("-s", "--skip_days [INT]", "Days from present to exclude") do |x|
      options[:skip_days] = x.to_i
    end

    opts.on("-t", "--type [TYPE]", [:aoi, :layer, :log, :user],
            "TYPES: aoi, layer, log, user") do |x|
      options[:type] = x

      #allows the short "-t" to validate too...
      if options[:type].nil?
        puts "!!! Invalid or blank type supplied. Defaulting to: aoi"
        options[:type] = :aoi
      end
    end

    opts.on("-c", "--csv_out [PATH]", "Output to CSV (timestamped file)") do |x|
      default = "#{options[:type].to_s}_#{Time.now.to_f}.csv"
      options[:csv_out] = x ||= default
    end

    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end

  end.parse!

  # set default local csv path
  #csv_path = "#{options[:type].to_s}_#{Time.now.to_f}.csv"

  # merge optparser input with options from file (valid options.yml required)
  yml_path = options[:opts_path] ? options[:opts_path] : "./options.yml"
  if File.exists?(yml_path)
    Olds.set_opts = YAML.load_file(yml_path)[:olds].merge(options)
  else
    raise ArgumentError.new("invalid options file path: #{opts_path}") 
  end

  Olds.process_projects

rescue => e
  raise e if $DEBUG
  STDERR.puts e.message
  STDERR.puts e.backtrace.join("\n")
  exit 1
end

