#!/usr/bin/env ruby
require "optparse"
require "yaml"
require_relative "../lib/ggx_monitor/newlogs"

begin

  banner = "\n\nThis utility collects digital logs from a specified number of "\
    "days ago from GeoGraphix projects\nlisted in the options.yml file and "\
    "stores the results in the MS SQL Server GGX_NEWLOGS table.\n\nUsage: "\
    "ggx_newlogs [options]\n\n"

  options = {days_ago: 7}

  OptionParser.new do |opts|
    opts.banner = banner

    opts.on("-o", "--opts_path [PATH]", "Specify path to options file") do |o|
      options[:opts_path] = o
    end

    opts.on("-a", "--days_ago [INT]", "Number of days ago to query") do |a|
      options[:days_ago] = a
    end

    opts.on("-d", "--database [ACTION]", [:drop, :create, :empty, :read],
            "GGX_NEWLOGS (drop, create, empty, read)") do |d|
      options[:database] = d
      #allows the short "-d" to validate too...
      if options[:database] == nil
        raise ArgumentError.new("invalid argument: -d #{ARGV[0]}") 
      end
    end

    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end

  end.parse!

  # merge optparser input with options from file (valid options.yml required)
  yml_path = options[:opts_path] ? options[:opts_path] : "./options.yml"
  if File.exists?(yml_path)
    yml = YAML.load_file(yml_path)
    NewLogs.set_opts = yml[:newlogs].merge(options).merge(yml[:sql_server]) 
  else
    raise ArgumentError.new("invalid options file path: #{opts_path}") 
  end


  if options[:database]
    case options[:database]
    when :drop
      NewLogs.drop_table
    when :create
      NewLogs.create_table
    when :empty
      NewLogs.empty_table
    when :read
      NewLogs.read_table
    end
    exit
  end

  NewLogs.process_projects

rescue => e
  raise e if $DEBUG
  STDERR.puts e.message
  STDERR.puts e.backtrace.join("\n")
  exit 1
end
